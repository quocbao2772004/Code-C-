#include<bits/stdc++.h>
#define fi freopen("Ptit.in","r",stdin)
#define fo freopen("PTIT.out","w",stdout)
using namespace std;
//(a+bi)(c+di)
//=ac+adi+bci-bd
/*(a+bi)^2
=(a^2+2abi-b^2)*/
class Complex
{
     private:
            int real_partA;
            int imaginary_partA;
            int real_partB;
            int imaginary_partB;
     public:
            Complex(){}
            void getC()
            {
                int real_partC=real_partA+real_partB;
                int imaginary_partC=imaginary_partA+imaginary_partB;
                cout<<real_partC*real_partA-imaginary_partC*imaginary_partA;
                if(real_partA*imaginary_partC+real_partC*imaginary_partA>0)cout<<" + ";
                else cout<<" - ";
                cout<<abs(real_partA*imaginary_partC+real_partC*imaginary_partA)<<"i"<<", ";
            }   
            void getD()
            {
                int real_partD=real_partA+real_partB;
                int imaginary_partD=imaginary_partA+imaginary_partB;
                cout<<real_partD*real_partD-imaginary_partD*imaginary_partD;
                if(2*real_partD*imaginary_partD>0)cout<<" + ";
                else cout<<" - ";
                cout<<abs(2*real_partD*imaginary_partD)<<"i"<<endl;
                
            }
            friend istream& operator>>(istream& input,Complex& c)
            {
                input>>c.real_partA>>c.imaginary_partA;
                input>>c.real_partB>>c.imaginary_partB;
                return input;
            }
            
};
int main()
{
    //fi;fo;
    int test;
    cin>>test;
    while(test--)
    {
        Complex c;
        cin>>c;
        c.getC();
        c.getD();
    }
    
   
   
    return 0;
}
